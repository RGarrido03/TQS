services:
  database:
    image: postgres:16.2
    environment:
      # Default user is postgres
      POSTGRES_DB: tqs
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - pg_data:/var/lib/postgresql/data

  backend:
    depends_on:
      database:
        condition: service_healthy
    build: ./backend
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 2s
      retries: 100
      start_period: 2s
    environment:
      SPRING_APPLICATION_JSON: '{
            "spring.datasource.url" : "jdbc:postgresql://database:5432/tqs",
            "spring.datasource.username" : "postgres",
            "spring.datasource.password" : "postgres",
            "spring.jpa.hibernate.ddl-auto" : "update",
            "management.influx.metrics.export.enabled": "false",
            "springdoc.api-docs.path": "/api/docs-config",
            "springdoc.swagger-ui.url": "/api/docs-config",
            "springdoc.swagger-ui.path": "/api/docs/index.html"
          }'
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - ./backend:/backend
      - maven_data:/root/.m2

  frontend:
    depends_on:
      backend:
        condition: service_healthy
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/frontend
      - node_modules:/frontend/node_modules
    networks:
      - frontend

  proxy:
    image: nginx:1.25.4
    ports:
      - 80:80
      - 443:443
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - backend
      - frontend
    restart: unless-stopped
    volumes:
      - ./proxy/default.conf:/etc/nginx/conf.d/default.conf

volumes:
  node_modules:
  maven_data:
  pg_data:

networks:
  backend:
  frontend: